Array.prototype.forEach(): Itrera sobre los elementos de un arreglo (array) y ejecuta una función de devolución de llamada (callback) una vez por cada elemento en el arreglo,
    en el orden en que aparecen en el arreglo.   Sintx: array.forEach(callbackFn(currentValue, index, array), thisArg);
    Ej:
    const array = [1, 2, 3, 4, 5];

    array.forEach(function(element, index, array) {
        console.log(`Elemento: ${element}, Índice: ${index}, Arreglo: ${array}`);
    });

Array.prototype.map(): Crea un nuevo arreglo con los resultados de llamar a una función de devolución de llamada (callback) en cada elemento de un arreglo (array),
    en el orden en que aparecen en el arreglo original.     Sintx: const newArray = array.map(callbackFn(currentValue, index, array), thisArg);
    Ej: 
    const array = [1, 2, 3, 4, 5];

    const newArray = array.map(function(element, index, array) {
        return element * 2; // Se multiplica cada elemento por 2
    });

    console.log(newArray); // Output: [2, 4, 6, 8, 10]

Array.prototype.filter(): crear un nuevo arreglo con todos los elementos que pasan una prueba (función de devolución de llamada) proporcionada.
    Sintx: const newArray = array.filter(callbackFn(currentValue, index, array), thisArg);
    Ej:
    const array = [1, 2, 3, 4, 5];

    const newArray = array.filter(function(element, index, array) {
        return element % 2 === 0; // Se filtran solo los números pares
    });

    console.log(newArray); // Output: [2, 4]

Array.prototype.reduce()
Array.prototype.find()
Array.prototype.findIndex()
Array.prototype.sort()
Array.prototype.some()
Array.prototype.every()
Array.prototype.includes()
Array.prototype.concat()
Array.prototype.join()
Array.prototype.slice()
Array.prototype.splice()
Array.prototype.reverse()
Array.prototype.fill()
Array.prototype.reduceRight()
Array.prototype.flat()
Array.prototype.flatMap()
Array.prototype.copyWithin()

String.prototype.split()
String.prototype.trim()
String.prototype.replace()
String.prototype.includes(): Determina si una cadena de caracteres contiene otra cadena de caracteres como una subcadena.
    Devuelve true si la subcadena está presente en la cadena original y false si no lo está.    Sintx: cadena.includes(subcadena);
    Ej:
    const cadena = "Hola, mundo!";
    const subcadena = "mundo";

    console.log(cadena.includes(subcadena)); // true

String.prototype.substring()
String.prototype.charAt()
String.prototype.charCodeAt()
String.prototype.indexOf()
String.prototype.lastIndexOf()
String.prototype.concat()
String.prototype.startsWith()
String.prototype.endsWith()
String.prototype.repeat()
String.prototype.padStart()
String.prototype.padEnd()
String.prototype.toLowerCase()
String.prototype.toUpperCase()
String.prototype.localeCompare()

Object.keys()
Object.values()
Object.entries()
Object.prototype.hasOwnProperty()
Object.prototype.isPrototypeOf()
Object.prototype.propertyIsEnumerable()
Object.prototype.toString()
Object.assign()
Object.create()
Object.freeze()

JSON.parse()
JSON.stringify()

Math.random()
Math.floor()
Math.round()
Math.max()
Math.min()
Math.abs()
Math.ceil()
Math.exp()
Math.log()
Math.sin()
Math.cos()
Math.tan()
Math.sqrt()

Date.prototype.getTime()
Date.prototype.toISOString()
Date.prototype.getFullYear()
Date.prototype.getMonth()
Date.prototype.getDate()
Date.prototype.getHours()
Date.prototype.getMinutes()
Date.prototype.getSeconds()
Date.prototype.getMilliseconds()

Set.add(value): Agrega un nuevo elemento con el valor especificado al conjunto.
Set.delete(value): Elimina el elemento con el valor especificado del conjunto.
Set.has(value): Devuelve un booleano que indica si el conjunto contiene un elemento con el valor especificado.
Set.clear(): Elimina todos los elementos del conjunto.
Set.size: Devuelve el número de elementos en el conjunto.
Set.forEach(callbackFn, thisArg): Ejecuta una función de devolución de llamada (callback) una vez por cada elemento en el conjunto, en orden de inserción.
Set.values(): Devuelve un nuevo objeto Iterator que contiene los valores de los elementos en el conjunto, en orden de inserción.
Set.keys(): Es equivalente a values(), ya que los conjuntos en JavaScript no tienen claves y valores separados.
Set.entries(): Devuelve un nuevo objeto Iterator que contiene pares de [valor, valor] de los elementos en el conjunto, en orden de inserción.
    Esto es similar a values(), pero se mantiene por compatibilidad con Map.